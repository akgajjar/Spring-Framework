<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Upcoming Webinar - Integration Patterns in a Serverless World</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_Cou8gFuJgQ/upcoming-webinar-integration-patterns.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="camelk" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="webinar" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-upcoming_webinar_integration_patterns_in_a_serverless_world</id><updated>2019-10-04T07:59:24Z</updated><published>2019-10-04T07:59:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Next Thursday, October 10th, I am giving a 35 minutes &lt;a href="https://www.redhat.com/en/events/webinar/develop-deploy-deliver-continuously?sc_cid=701f2000000uI48AAE"&gt;webinar about Serverless Integration &lt;/a&gt;(yeah it covers &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;, Camel K, Knative and Quarkus).&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-GI5-lB0uuUw/XZb6Lit9XWI/AAAAAAAAB_o/k4lq0lLa0IE_847E-PWevLt2xQ63fwR5ACLcBGAsYHQ/s1600/Screenshot%2B2019-10-04%2Bat%2B09.51.38.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="279" data-original-width="479" height="186" src="https://1.bp.blogspot.com/-GI5-lB0uuUw/XZb6Lit9XWI/AAAAAAAAB_o/k4lq0lLa0IE_847E-PWevLt2xQ63fwR5ACLcBGAsYHQ/s320/Screenshot%2B2019-10-04%2Bat%2B09.51.38.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The webinar is part of a full day event (virtual event) where there are keynotes and a parallel tracks with 12 breakout sessions.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;My talk is focused purely on the upstream work we do at Apache Camel with the next generation Camel 3.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The abstract for my talk&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Cloud-native applications of the future will consist of hybrid workloads: stateful applications, batch jobs, microservices, and functions, wrapped as Linux containers and deployed via Kubernetes on any cloud.&lt;br /&gt;&lt;br /&gt;In this session, we'll explore the key challenges with function interactions and coordination, addressing these problems using classic integration patterns and modern approaches with the latest innovation from the Apache Camel community: Camel K, a lightweight integration platform that enables enterprise integration patterns to be used natively on any Kubernetes cluster.&lt;br /&gt;&lt;br /&gt;When used in combination with Knative, a framework that adds serverless building blocks to Kubernetes, and the subatomic execution environment of Quarkus, Camel K can mix serverless features such as auto-scaling, scaling to zero, and event-based communication with the outstanding integration capabilities of Apache Camel.&lt;br /&gt;&lt;br /&gt;We will show how Camel K works. We'll also use examples to demonstrate how Camel K makes it easier to connect cloud services or enterprise applications using some of the 250+ components that Camel provides.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Registration&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The event is free to attend, and you can &lt;a href="https://www.redhat.com/en/events/webinar/develop-deploy-deliver-continuously?sc_cid=701f2000000uI48AAE"&gt;signup using this link&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Date: October 10th 2019&lt;br /&gt;Time: 5 pm CEST (event starts with keynotes)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=wep3JSgvpYo:C74o38vhlTg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=wep3JSgvpYo:C74o38vhlTg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/wep3JSgvpYo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_Cou8gFuJgQ" height="1" width="1" alt=""/&gt;</content><summary>Next Thursday, October 10th, I am giving a 35 minutes webinar about Serverless Integration (yeah it covers Apache Camel, Camel K, Knative and Quarkus). The webinar is part of a full day event (virtual event) where there are keynotes and a parallel tracks with 12 breakout sessions.  My talk is focused purely on the upstream work we do at Apache Camel with the next generation Camel 3. The abstract f...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-10-04T07:59:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/wep3JSgvpYo/upcoming-webinar-integration-patterns.html</feedburner:origLink></entry><entry><title>Getting started with Golang Operators by using Operator SDK</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jFU3tyt0Qfo/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Operators" scheme="searchisko:content:tags" /><author><name>Camila Macedo</name></author><id>searchisko:content:id:jbossorg_blog-getting_started_with_golang_operators_by_using_operator_sdk</id><updated>2019-10-04T07:00:00Z</updated><published>2019-10-04T07:00:00Z</published><content type="html">&lt;p&gt;The open-source &lt;a href="https://coreos.com/blog/introducing-operator-framework"&gt;Operator Framework&lt;/a&gt; is a toolkit to manage Kubernetes-native applications. The framework and its features provide the ability to develop solutions to simplify some complexities, such as the process to install, configure, manage and package applications on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. It provides the ability to use a client to perform CRUD actions, that is, operations to create, read, update, and delete data on these platforms.&lt;/p&gt; &lt;p&gt;By using operators, it&amp;#8217;s possible not just to provide all expected resources but also to manage them dynamically, programmatically, and at execution time. To illustrate this idea, imagine if someone accidentally changed a configuration or removed a resource by mistake; in this case, the operator could fix it without any human intervention. We&amp;#8217;ll take a look at Operators and the &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator SDK&lt;/a&gt; in this article.&lt;br /&gt; &lt;span id="more-631057"&gt;&lt;/span&gt;&lt;br /&gt; &lt;strong&gt;Note:&lt;/strong&gt; As a prerequisite for this content, it&amp;#8217;s essential to follow the steps outlined in the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; &lt;h2&gt;APIs&lt;/h2&gt; &lt;p&gt;When following the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt;, one of the first steps is to run the command &lt;code&gt;&lt;strong&gt;operator-sdk add api --api-version=cache.example.com/v1alpha1 --kind=Memcached&lt;/strong&gt;.&lt;/code&gt; The purpose of this command is to generate Custom Resource (CR) and Custom Resource Definition (CRD) resources for the &lt;a href="https://github.com/operator-framework/operator-sdk/blob/master/doc/user-guide.md"&gt;Memcached&lt;/a&gt; Kind. This command is creating the API with the group &lt;strong&gt;&lt;code&gt;cache.example.com&lt;/code&gt;&lt;/strong&gt;, and version &lt;strong&gt;&lt;code&gt;v1alpha1&lt;/code&gt;&lt;/strong&gt; &lt;span style="font-weight: 400;"&gt;  which uniquely identifies the new CRD of the &lt;code&gt;&lt;strong&gt;Memcached&lt;/strong&gt;&lt;/code&gt; Kind.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Consequently, by using the Operator SDK tool, we can create our APIs and objects that will represent our solutions on these platforms. The &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt; tutorial adds only a single kind of resource; however, it could have as many Kinds as needed (1…N). Basically, the CRDs are a definition of our customised Objects, and the CRs are an instance of it.&lt;/p&gt; &lt;h2&gt;Project&lt;/h2&gt; &lt;p&gt;The Manager is responsible for managing Controllers and, then by the controllers; we can do operations on the cluster side. For a better understanding of how it works, see that in the example, one of the steps was to create a Docker image with the command &lt;strong&gt;&lt;code&gt;$operator-sdk build user/image:tag&lt;/code&gt;&lt;/strong&gt; and then replace the value &lt;strong&gt;&lt;code&gt;REPLACE_IMAGE&lt;/code&gt;&lt;/strong&gt; in the file &lt;strong&gt;&lt;code&gt;operator.yaml&lt;/code&gt;&lt;/strong&gt; file.  This file describes the project instance built by it. Note that, by running the command &lt;code&gt;&lt;strong&gt;kubectl create -f deploy/operator.yaml&lt;/strong&gt;&lt;/code&gt; we are creating a pod with this image.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Demonstrating&lt;/b&gt; the idea&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s think about the classic scenario where the goal is to have an application and its database running on the platform with Kubernetes. Then, one object could represent the App, and another one could represent the DB. By having one CRD to describe the App and another one for the DB, we will not be hurting concepts such as encapsulation, the single responsibility principle, and cohesion. Damaging these concepts could cause unexpected sides effects, such as difficulty in extending, reuse, or maintenance, just to mention a few.&lt;/p&gt; &lt;p&gt;In conclusion, the App CRD will have as its controller the DB CRD. Imagine, that a Deployment and Service are required for the application run so that the App&amp;#8217;s Controller will provide these resources in this example. Similarly, the DB&amp;#8217;s controller will have the business logic implementation of its objects.&lt;/p&gt; &lt;p&gt;In this way, for each CRD, one controller should be produced according to the design set by the &lt;a href="https://github.com/kubernetes-sigs/controller-runtime"&gt;controller-runtime&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Controller main functions&lt;/h2&gt; &lt;h3&gt;Reconcile()&lt;/h3&gt; &lt;p&gt;The reconcile function is responsible for synchronising the resources and their specifications according to the business logic implemented on them. In this way, it works like a loop, and it does not stop until all conditionals match its implementation. The following is a pseudo-code with an example for clarifies it.&lt;/p&gt; &lt;pre&gt;reconcile App { // Check if a Deployment for the app exists, if not create one // If has an error, then go to the beginning of the reconcile &lt;span class="pl-k"&gt; if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{}, err } // Check if a Service for the app exists, if not create one // If has an error, then go to the beginning of the reconcile &lt;span class="pl-k"&gt;if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{}, err } // Looking for Database CR/CRD // Check the Database Deployments Replicas size // If deployment.replicas size != cr.size, then update it // Then, go to the beginning of the reconcile &lt;span class="pl-k"&gt;if&lt;/span&gt; err != &lt;span class="pl-c1"&gt;nil&lt;/span&gt; { return reconcile.Result{Requeue: true}, nil } ... // If it is at the end of the loop, then: // All was done successfully and the reconcile can stop return reconcile.Result{}, nil } &lt;/pre&gt; &lt;p&gt;The following are possible return options to restart the Reconcile:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;With the Error:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{}, err&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Without an error:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{Requeue: true}, nil&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Therefore, to stop the Reconcile, use:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;return reconcile.Result{}, nil&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For more details, check the &lt;code&gt;Reconcile&lt;/code&gt; and its &lt;code&gt;Result&lt;/code&gt; &lt;a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/reconcile" target="_blank" rel="noopener noreferrer"&gt;implementations&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Watch()&lt;/h3&gt; &lt;p&gt;The watches are responsible for &amp;#8221;watching&amp;#8221; the objects and triggering the Reconcile. Also, the Operator SDK tool will generate a Watch function for each primary resource (CRD). Here is an example:&lt;/p&gt; &lt;pre&gt;// Watch for changes to primary resource Memcached err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;cachev1alpha1.Memcached{}}, &amp;#38;handler.EnqueueRequestForObject{}) if err != nil { return err } &lt;/pre&gt; &lt;p&gt;By following the &lt;a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener noreferrer"&gt;Getting Started&lt;/a&gt;, a watch function for each secondary object managed by it will also be implemented, such as below.&lt;/p&gt; &lt;pre&gt;// Watch for changes to secondary resource Pods and requeue the owner Memcached err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;appsv1.Deployment{}}, &amp;#38;handler.EnqueueRequestForOwner{ IsController: true, OwnerType: &amp;#38;cachev1alpha1.Memcached{}, }) if err != nil { return err } err = c.Watch(&amp;#38;source.Kind{Type: &amp;#38;corev1.Service{}}, &amp;#38;handler.EnqueueRequestForOwner{ IsController: true, OwnerType: &amp;#38;cachev1alpha1.Memcached{}, }) if err != nil { return err } &lt;/pre&gt; &lt;p&gt;Also, the following code ensures the quantity of Memcached replicas running on the cluster.&lt;/p&gt; &lt;pre&gt;// Ensure the deployment size is the same as the spec size := memcached.Spec.Size if *deployment.Spec.Replicas != size { deployment.Spec&amp;#62;.Replicas = &amp;#38;size err = r.client.Update(context.TODO(), deployment) if err != nil { reqLogger.Error(err, "Failed to update Deployment.", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name) return reconcile.Result{}, err } } &lt;/pre&gt; &lt;p&gt;After that, you can check that the above code worked by doing the following steps.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Scale the Memcached pod up or down.&lt;/li&gt; &lt;li&gt;Check that the replicas will come back for the original size because of the above code.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above steps will only work if you were able to follow the guide and all finished successfully.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#38;linkname=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F04%2Fgetting-started-with-golang-operators-by-using-operator-sdk%2F&amp;#038;title=Getting%20started%20with%20Golang%20Operators%20by%20using%20Operator%20SDK" data-a2a-url="https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/" data-a2a-title="Getting started with Golang Operators by using Operator SDK"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/"&gt;Getting started with Golang Operators by using Operator SDK&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jFU3tyt0Qfo" height="1" width="1" alt=""/&gt;</content><summary>The open-source Operator Framework is a toolkit to manage Kubernetes-native applications. The framework and its features provide the ability to develop solutions to simplify some complexities, such as the process to install, configure, manage and package applications on Kubernetes and Red Hat OpenShift. It provides the ability to use a client to perform CRUD actions, that is, operations to create,...</summary><dc:creator>Camila Macedo</dc:creator><dc:date>2019-10-04T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/04/getting-started-with-golang-operators-by-using-operator-sdk/</feedburner:origLink></entry><entry><title>Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YIUDODqVBtc/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Mary Cochran</name></author><id>searchisko:content:id:jbossorg_blog-deploy_red_hat_amq_streams_and_fuse_on_openshift_container_platform_4</id><updated>2019-10-03T07:00:32Z</updated><published>2019-10-03T07:00:32Z</published><content type="html">&lt;p&gt;In the following video, I demonstrate how to deploy &lt;a href="https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/"&gt;Red Hat AMQ Streams&lt;/a&gt; (based on upstream Apache Kafka) on &lt;a href="https://developers.redhat.com/openshift/"&gt;OpenShift 4&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I will also demonstrate how to use AMQ Streams in a basic way using &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt;.  There is a Camel route exposing a REST endpoint at &lt;code&gt;/goodbye&lt;/code&gt;, which—when hit—sends a &amp;#8220;Goodbye World&amp;#8221; message to the topic.  There is also a timer sending &amp;#8220;Hello World&amp;#8221; messages periodically to the topic.  A separate Camel route consumes from the topic and logs the messages for our visibility.&lt;span id="more-631147"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Check out how simple it can be to get AMQ Streams up and running on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/S1PmT01FJ80" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#38;linkname=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdeploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4%2F&amp;#038;title=Deploy%20Red%20Hat%20AMQ%20Streams%20and%20Fuse%20on%20OpenShift%20Container%20Platform%204" data-a2a-url="https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/" data-a2a-title="Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/"&gt;Deploy Red Hat AMQ Streams and Fuse on OpenShift Container Platform 4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YIUDODqVBtc" height="1" width="1" alt=""/&gt;</content><summary>In the following video, I demonstrate how to deploy Red Hat AMQ Streams (based on upstream Apache Kafka) on OpenShift 4. I will also demonstrate how to use AMQ Streams in a basic way using Red Hat Fuse.  There is a Camel route exposing a REST endpoint at /goodbye, which—when hit—sends a “Goodbye World” message to the topic.  There is also a timer sending “Hello World” messages periodically to the ...</summary><dc:creator>Mary Cochran</dc:creator><dc:date>2019-10-03T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/03/deploy-red-hat-amq-streams-and-fuse-on-openshift-container-platform-4/</feedburner:origLink></entry><entry><title>DevNation Live Bengaluru: Apache Kafka Streams and event-driven architecture</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bR4pFXDmoCs/" /><category term="Apache Kafka" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="DevNation Live" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_bengaluru_apache_kafka_streams_and_event_driven_architecture</id><updated>2019-10-03T07:00:06Z</updated><published>2019-10-03T07:00:06Z</published><content type="html">&lt;p&gt;Our first &lt;a href="https://developers.redhat.com/devnationlive-india/"&gt;DevNation Live regional event was held in Bengaluru, India&lt;/a&gt; in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists.&lt;/p&gt; &lt;p&gt;This tutorial, presented by &lt;a href="https://developers.redhat.com/blog/author/yanaga/"&gt;Edson Yanaga&lt;/a&gt;, dives into events, message-oriented middleware, &lt;a href="https://developers.redhat.com/videos/youtube/CZhOJ_ysIiI/"&gt;Apache Kafk&lt;/a&gt;a, data streaming, and analytics to explain the fundamentals for creating a distributed, resilient, and scalable application.&lt;/p&gt; &lt;p&gt;Once you understand events, messaging becomes an essential asset in your toolbox. Using an event-driven architecture on top of a message-driven architecture helps you unleash the benefits of distributed computing.&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/W4GOP9WaQes" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us at an upcoming&lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt; &lt;span style="font-weight: 400;"&gt;developer event&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and see our collection of&lt;/span&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; &lt;span style="font-weight: 400;"&gt;past DevNation Live tech talks&lt;/span&gt;&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#38;linkname=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F03%2Fdevnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture%2F&amp;#038;title=DevNation%20Live%20Bengaluru%3A%20Apache%20Kafka%20Streams%20and%20event-driven%20architecture" data-a2a-url="https://developers.redhat.com/blog/2019/10/03/devnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture/" data-a2a-title="DevNation Live Bengaluru: Apache Kafka Streams and event-driven architecture"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/03/devnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture/"&gt;DevNation Live Bengaluru: Apache Kafka Streams and event-driven architecture&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bR4pFXDmoCs" height="1" width="1" alt=""/&gt;</content><summary>Our first DevNation Live regional event was held in Bengaluru, India in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists. This tutorial, presented by Edson Yanaga, dives into events, message-oriented middleware, Apache Kafka, data streaming, and analytics to explain the fundamentals for creating a distributed, resilient, an...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-10-03T07:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/03/devnation-live-bengaluru-apache-kafka-streams-and-event-driven-architecture/</feedburner:origLink></entry><entry><title>Apache Camel 3 is only 2 months away</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CUg32Y7i4Lg/apache-camel-3-is-only-2-months-away.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_is_only_2_months_away</id><updated>2019-10-02T08:34:50Z</updated><published>2019-10-02T08:34:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The Camel team is busy working on the last set of work for &lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; 3. Today the 2nd release candidate was built and published on a staging repository for &lt;a href="https://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-3-0-0-RC2-Release-Candidate-2-td5844106.html"&gt;early adapters to give it a try&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;As I am busy myself then I just wanted to write a short blog post to keep the community posted that Apache Camel 3 is on the way, and that we expect it to be released by end of this year (sometime in November or December).&lt;br /&gt;&lt;br /&gt;The latest deadline is to release Camel 3.0 before December 19th 2019 as it was exactly on that day 1 year ago, we switched the master branch to become the work branch for Apache Camel 3. That means the total development time for Camel 3 would be 1 year.&lt;br /&gt;&lt;br /&gt;Here is a illustration that highlights the timeline of Camel 3:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-sDxe7brT9Bc/XZReFJTWJSI/AAAAAAAAB_Q/Jo0nNz7Mfhwr85Xmb04sdHS0RszE-gP5QCLcBGAsYHQ/s1600/camel3-progress.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="588" data-original-width="1107" height="210" src="https://1.bp.blogspot.com/-sDxe7brT9Bc/XZReFJTWJSI/AAAAAAAAB_Q/Jo0nNz7Mfhwr85Xmb04sdHS0RszE-gP5QCLcBGAsYHQ/s400/camel3-progress.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;That is not all Apache Camel, is now a family of 3 projects (at this moment). So working on Camel 3 is not all we do. &lt;a href="https://github.com/apache/camel-k/"&gt;Camel K&lt;/a&gt; and &lt;a href="https://github.com/apache/camel-quarkus"&gt;Camel Quarkus&lt;/a&gt; are very promising for cloud-native integration (microservices and serverless).&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-61ZurKFeOs4/XZRfRq05faI/AAAAAAAAB_c/iHb8ARsxduAKzN3OcxUaGd-G7yguWbZmQCLcBGAsYHQ/s1600/camel3-projects.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="450" data-original-width="1064" height="167" src="https://1.bp.blogspot.com/-61ZurKFeOs4/XZRfRq05faI/AAAAAAAAB_c/iHb8ARsxduAKzN3OcxUaGd-G7yguWbZmQCLcBGAsYHQ/s400/camel3-projects.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;These projects have their own lifecycle. Will will post more details about these projects, and what's new in Camel 3 in the following months leading up to the final release of Camel 3.&amp;nbsp; So stay tuned.&lt;br /&gt;&lt;br /&gt;PS: If you are migrating Camel 2.x applications to Camel 3, then read the &lt;a href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html"&gt;migration guide&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=qtwKvSrWuyE:9I3gXH6Zt4k:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=qtwKvSrWuyE:9I3gXH6Zt4k:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=qtwKvSrWuyE:9I3gXH6Zt4k:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=qtwKvSrWuyE:9I3gXH6Zt4k:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=qtwKvSrWuyE:9I3gXH6Zt4k:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=qtwKvSrWuyE:9I3gXH6Zt4k:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=qtwKvSrWuyE:9I3gXH6Zt4k:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/qtwKvSrWuyE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CUg32Y7i4Lg" height="1" width="1" alt=""/&gt;</content><summary>The Camel team is busy working on the last set of work for Apache Camel 3. Today the 2nd release candidate was built and published on a staging repository for early adapters to give it a try. As I am busy myself then I just wanted to write a short blog post to keep the community posted that Apache Camel 3 is on the way, and that we expect it to be released by end of this year (sometime in November...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-10-02T08:34:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/qtwKvSrWuyE/apache-camel-3-is-only-2-months-away.html</feedburner:origLink></entry><entry><title>Apache Camel Language support in CodeMirror</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1Y40rqRSg8A/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="language servers" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><author><name>Aurélien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_language_support_in_codemirror</id><updated>2019-10-02T07:00:23Z</updated><published>2019-10-02T07:00:23Z</published><content type="html">&lt;p&gt;In a previous article, &lt;a href="https://developers.redhat.com/blog/2019/09/17/a-look-at-development-environments-with-specific-tooling-for-apache-camel-language/"&gt;I mentioned&lt;/a&gt; the growing set of supported IDEs/editors for the &lt;a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache Camel&lt;/a&gt; language. I&amp;#8217;m happy to announce that this set has grown again. It is now possible to use &lt;a href="https://codemirror.net/" target="_blank" rel="noopener noreferrer"&gt;CodeMirror&lt;/a&gt; with Apache Camel. CodeMirror is a lightweight, embeddable editor for web browsers.&lt;span id="more-631747"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This &lt;a href="https://www.youtube.com/redirect?q=https%3A%2F%2Fgithub.com%2Fcamel-tooling%2Fcamel-lsp-client-codemirror&amp;#38;redir_token=bOjTCSEyHPMub--ozWPfv8w6w0x8MTU2OTQ4MzY3OUAxNTY5Mzk3Mjc5&amp;#38;event=video_description&amp;#38;v=JOJW5liL22g"&gt;repository&lt;/a&gt; shows how to use CodeMirror. Based on this repository example, you can watch the features in action in this video:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/JOJW5liL22g?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Behind the scenes&lt;/h2&gt; &lt;p&gt;With the &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol (LSP)&lt;/a&gt;, communication can be done through standard input/output or a WebSocket. CodeMirror supports only WebSocket connections. The Camel Language Server was supporting only standard input/output. Then, the Camel Language Server needs to support WebSocket connections. This addition was done using the new &lt;a href="https://github.com/camel-tooling/camel-language-server/blob/727f7a88a140041f452151da45df7b9740c5c34e/src/main/java/com/github/cameltooling/lsp/internal/websocket/CamelLSPWebSocketEndpoint.java#L28-L43" target="_blank" rel="noopener noreferrer"&gt;LSP4J API&lt;/a&gt; and the reference implementation of WebSocket in Java, &lt;a href="https://tyrus-project.github.io/" target="_blank" rel="noopener noreferrer"&gt;Tyrus&lt;/a&gt;. The idea was to keep the implementation as simple and lightweight as possible.&lt;/p&gt; &lt;h2&gt;Support for another IDE/editor?&lt;/h2&gt; &lt;p&gt;Now that the Camel Language Server supports WebSocket connections, this opens the possibility to integrate Apache Camel into other clients that support only WebSocket, such as the &lt;a href="https://github.com/Microsoft/monaco-editor" target="_blank" rel="noopener noreferrer"&gt;MS Monaco Editor.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Adding support for CodeMirror was surely one of the hardest tasks because it required implementing WebSocket support on the Camel Language Server side, yet it took me only a few days. Consequently, I encourage users of other IDEs/editors to test how it goes with Camel LSP and then share steps for using them. You can find a list of potential clients &lt;a href="https://langserver.org/#implementations-client" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt; (I recommend searching for your beloved IDE, as not all are listed). Some pointers are provided for &lt;a href="https://github.com/camel-tooling/camel-lsp-client-spacevim/issues/1" target="_blank" rel="noopener noreferrer"&gt;Vim&lt;/a&gt; or &lt;a href="https://github.com/camel-tooling/camel-lsp-client-emacs/issues" target="_blank" rel="noopener noreferrer"&gt;Emacs&lt;/a&gt;. If there is no specific Git repository for your IDE in the &lt;a href="https://github.com/camel-tooling" target="_blank" rel="noopener noreferrer"&gt;Camel tooling organization&lt;/a&gt;, you can make a request or provide feedback on the &lt;a href="https://github.com/camel-tooling/camel-language-server" target="_blank" rel="noopener noreferrer"&gt;Camel Language Server Git issue repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#38;linkname=Apache%20Camel%20Language%20support%20in%20CodeMirror" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fapache-camel-language-support-in-codemirror%2F&amp;#038;title=Apache%20Camel%20Language%20support%20in%20CodeMirror" data-a2a-url="https://developers.redhat.com/blog/2019/10/02/apache-camel-language-support-in-codemirror/" data-a2a-title="Apache Camel Language support in CodeMirror"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/02/apache-camel-language-support-in-codemirror/"&gt;Apache Camel Language support in CodeMirror&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1Y40rqRSg8A" height="1" width="1" alt=""/&gt;</content><summary>In a previous article, I mentioned the growing set of supported IDEs/editors for the Apache Camel language. I’m happy to announce that this set has grown again. It is now possible to use CodeMirror with Apache Camel. CodeMirror is a lightweight, embeddable editor for web browsers. This repository shows how to use CodeMirror. Based on this repository example, you can watch the features in action in...</summary><dc:creator>Aurélien Pupier</dc:creator><dc:date>2019-10-02T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/02/apache-camel-language-support-in-codemirror/</feedburner:origLink></entry><entry><title>Autowire MicroProfile into Spring with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qgNKVbI5XzU/" /><category term="Modern App Dev" /><category term="Programming Languages" /><category term="Quarkus" /><category term="Spring Boot" /><category term="containers" /><category term="MicroProfile" /><author><name>john clingan</name></author><id>https://developers.redhat.com/blog/?p=628717</id><updated>2019-10-02T07:00:03Z</updated><published>2019-10-02T07:00:03Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/28/jumpstart-microservices-microprofile-starter-beta/"&gt;Eclipse MicroProfile&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt; are often thought of as separate and distinct APIs when developing &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. Developers default to their mental muscle memory by leveraging the APIs that they use on a daily basis. Learning new frameworks and runtimes can be a significant time investment. This article aims to ease the introduction to some popular &lt;a href="https://developers.redhat.com/blog/2018/11/21/eclipse-microprofile-for-spring-boot-developers/"&gt;MicroProfile APIs for Spring developers&lt;/a&gt; by enabling them to utilize the Spring APIs they already know while benefiting from significant new capabilities offered by &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;More specifically, this article covers the scope and details of the Spring APIs supported by Quarkus so Spring developers have a grasp of the foundation they can build on with MicroProfile APIs. The article then covers MicroProfile APIs that Spring developers will find helpful in the development of microservices. Only a subset of MicroProfile is covered.&lt;span id="more-628717"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Why Quarkus? Live coding is one reason, where any change is automatically reloaded whether MicroProfile, Spring, or any other Java API. Just run &lt;code&gt;mvn quarkus:dev&lt;/code&gt;. That&amp;#8217;s it. A second compelling reason is that the &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt;&amp;#8216;s Person service, which compiles Spring, MicroProfile, and JPA APIs to a native binary using GraalVM&amp;#8217;s native-image, starts in 0.055 seconds and uses ~90MB of RAM (RSS) after hitting the application RESTful endpoints. Run &lt;code&gt;mvn package -Pnative&lt;/code&gt; to compile to a native binary. That&amp;#8217;s it.&lt;/p&gt; &lt;p&gt;This article will not go into detailed comparisons, but should give the Spring developers an understanding of how the Spring and MicroProfile APIs can be used together with Quarkus.&lt;/p&gt; &lt;h2&gt;Containers and Kubernetes&lt;/h2&gt; &lt;p&gt;This article will only cover &lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt; support at a high level to keep this article short(er), but it is important to briefly discuss. One of the Quarkus key value propositions is &amp;#8220;Kubernetes-native Java,&amp;#8221; where the goal is to minimize the memory footprint and reduce the startup time. The reduced memory footprint helps drive up the density of applications on the same hardware, reducing overall costs.&lt;/p&gt; &lt;p&gt;Quarkus also &lt;a href="https://quarkus.io/guides/kubernetes-resources"&gt;supports auto-generation&lt;/a&gt; of a Kubernetes resources, and &lt;a href="https://quarkus.io/guides/"&gt;guides&lt;/a&gt; are available on deploying to Kubernetes and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; as well. Additionally, a Dockerfile.jvm (JVM packaging) and Dockerfile.native (native binary packaging) are generated automatically for container creation.&lt;/p&gt; &lt;p&gt;Last, given that Quarkus considers Kubernetes a target deployment environment, it forgoes using Java frameworks when inherent Kubernetes capabilities are available. Table 1 briefly maps Java frameworks typically used by Spring developers with Kubernetes built-in capabilities.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 1: Java framework to Kubernetes mapping&lt;/b&gt;&lt;/p&gt; &lt;p&gt;Service, Replication Controller(&amp;#8220;server side&amp;#8221;)&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Capability&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Traditional Spring Boot&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Kubernetes&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Service discovery&lt;/td&gt; &lt;td&gt;Eureka&lt;/td&gt; &lt;td&gt;DNS&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Configuration&lt;/td&gt; &lt;td&gt;Spring Cloud Config&lt;/td&gt; &lt;td&gt;Config Maps / Secrets&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Load balancing&lt;/td&gt; &lt;td&gt;Ribbon (&amp;#8220;client side&amp;#8221;)&lt;/td&gt; &lt;td&gt;Service, Replication Controller(&amp;#8220;server side&amp;#8221;)&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;Compiling and running the example code&lt;/h2&gt; &lt;p&gt;This article is accompanied by an &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; that utilizes Spring and MicroProfile APIs together in the same project, and even the same Java class. The code can be compiled and run from the command line. Be sure to read the README.md for instructions.&lt;/p&gt; &lt;h2&gt;Spring Framework APIs&lt;/h2&gt; &lt;h3&gt;Dependency Injection&lt;/h3&gt; &lt;p&gt;Quarkus supports many &lt;a href="https://quarkus.io/guides/cdi-reference"&gt;Contexts and Dependency Injection (CDI) APIs&lt;/a&gt; and Spring Dependency Injection (Spring DI) APIs. MicroProfile, &lt;a href="https://developers.redhat.com/blog/2019/09/12/jakarta-ee-8-the-new-era-of-java-ee-explained/"&gt;Java EE, and Jakarta EE&lt;/a&gt; developers will be very familiar with CDI. Spring developers, on the other hand, can use the &lt;i&gt;Quarkus Extension for Spring DI API&lt;/i&gt; for Spring DI compatibility. Table 2 covers a sample of the supported Spring DI APIs.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; utilizes both CDI and Spring Dependency Injection, and the Quarkus &lt;a href="https://quarkus.io/guides/spring-di-guide"&gt;Spring DI Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 2: Sample of supported Spring DI APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;Spring DI&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Constructor Injection&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public PersonSpringController( PersonSpringRepository personRepository, // injected PersonSpringMPService personService) { // injected this.personRepository = personRepository; this.personService = personService; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Field Injection&lt;br /&gt; @Autowired&lt;br /&gt; @Value&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Autowired @RestClient SalutationRestClient salutationRestClient; @Value("${fallbackSalutation}") String fallbackSalutation;&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Bean&lt;br /&gt; @Configuration&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Configuration public class AppConfiguration { @Bean(name = "capitalizeFunction") public StringFunction capitalizer() { return String::toUpperCase; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Component&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Component("noopFunction") public class NoOpSingleStringFunction implements StringFunction { @Override public String apply(String s) { return s; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Service&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Service public class MessageProducer { @Value("${greeting.message}") String message; public String getPrefix() { return message; } }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Web framework&lt;/h3&gt; &lt;p&gt;MicroProfile developers will be comfortable with the Quarkus support for JAX-RS, MicroProfile Rest Client, JSON-P and JSON-B as the core web programming model. Spring developers may be surprised to know that Quarkus has recently added Spring Web API support, specifically around Spring REST-related APIs. As with Spring DI, the goal of Spring Web API support is to make Spring developers feel at home using Spring Web API and MicroProfile APIs together. Table 3 covers a sample of supported Spring Web APIs.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;example project&lt;/a&gt; utilizes Spring Web and MicroProfile Rest Client APIs, and the Quarkus &lt;a href="https://quarkus.io/guides/spring-web-guide"&gt;Spring Web Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 3: Sample of supported Spring Web APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;Spring Web&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RestController&lt;br /&gt; @RequestMapping&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@RestController @RequestMapping("/person") public class PersonSpringController { ... ... ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@GetMapping&lt;br /&gt; @PostMapping&lt;br /&gt; @PutMapping&lt;br /&gt; @DeleteMapping&lt;br /&gt; @PatchMapping&lt;br /&gt; @RequestParam&lt;br /&gt; @RequestHeader&lt;br /&gt; @MatrixVariable&lt;br /&gt; @PathVariable&lt;br /&gt; @CookieValue&lt;br /&gt; @RequestBody&lt;br /&gt; @ResponseStatus&lt;br /&gt; @ExceptionHandler&lt;br /&gt; @RestControllerAdvice (partial)&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@GetMapping(path = "/greet/{id}", produces = "text/plain") public String greetPerson( @PathVariable(name = "id") long id) { ... ... ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Spring Data JPA&lt;/h3&gt; &lt;p&gt;MicroProfile developers will be comfortable with the Quarkus JPA support using Hibernate ORM. Spring developers, have no fear! Quarkus has support for commonly used Spring Data JPA annotations and types. Table 4 covers a sample of supported Spring Data JPA APIs.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;The &lt;/span&gt;&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt;&lt;span style="font-weight: 400"&gt;example project&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt; utilizes the Spring Data JPA repository APIs, and the Quarkus &lt;/span&gt;&lt;a href="https://quarkus.io/guides/spring-data-jpa-guide"&gt;&lt;span style="font-weight: 400"&gt;Spring Data JPA Guide&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt; goes into greater detail along with additional examples.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 4: Sample of supported Spring Data JPA APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;Spring Data JPA&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Supported Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400"&gt;CrudRepository&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends JpaRepository, PersonFragment { ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Repository&lt;/p&gt; &lt;p&gt;JpaRepository&lt;/p&gt; &lt;p&gt;PagingAndSortingRepository&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public class PersonRepository extends Repository { Person save(Person entity); Optional findById(Person entity); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400"&gt;Repository Fragments&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends JpaRepository, PersonFragment { ... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Derived query methods&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface PersonRepository extends CrudRepository { List findByName(String name); Person findByNameBySsn(String ssn); Optional findByNameBySsnIgnoreCase(String ssn); Boolean existsBookByYearOfBirthBetween( Integer start, Integer end); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;span style="font-weight: 400"&gt;User-defined queries&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;pre&gt;public interface MovieRepository extends CrudRepository { Movie findFirstByOrderByDurationDesc(); @Query("select m from Movie m where m.rating = ?1") Iterator findByRating(String rating); @Query("from Movie where title = ?1") Movie findByTitle(String title); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;MicroProfile APIs&lt;/h2&gt; &lt;h3&gt;Fault tolerance&lt;/h3&gt; &lt;p&gt;Fault tolerance patterns are critical to prevent cascading failures and to create a reliable microservice architecture. &lt;a href="https://github.com/Netflix/Hystrix"&gt;Hystrix&lt;/a&gt; circuit-breaking has been a &amp;#8220;go-to&amp;#8221; fault tolerance pattern for Spring developers for years. However, Hystrix is in maintenance mode. MicroProfile Fault Tolerance is in active development and developers have been using it in production for years now. Quarkus recommends using MicroProfile Fault Tolerance APIs to improve service reliability. Table 5 covers a sample of the MicroProfile Fault Tolerance APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses the MicroProfile Fault Tolerance API, @Timeout and @Fallback in particular. The Quarkus &lt;a href="https://quarkus.io/guides/fault-tolerance-guide"&gt;Fault Tolerance Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 5: Sample of MicroProfile Fault Tolerance APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;MicroProfile Fault Tolerance&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Asynchronous&lt;/td&gt; &lt;td&gt;Execute logic on a separate thread&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Asynchronous @Retry public Future&amp;#60;String&amp;#62; getSalutation() {   ...   return future; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Bulkhead&lt;/td&gt; &lt;td&gt;Limits number of concurrent requests&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Bulkhead(5) public void fiveConcurrent() {   makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@CircuitBreaker&lt;/td&gt; &lt;td&gt;Gracefully handle faults and fault recovery&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@CircuitBreaker(delay=500 &lt;i&gt;// milliseconds&lt;/i&gt;   failureRatio = .75,   requestVolumeThreshold = 20,   successThreshold = 5) @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); &lt;i&gt;//...&lt;/i&gt; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Fallback&lt;/td&gt; &lt;td&gt;Alternative logic called upon failure&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timeout(500) &lt;i&gt;// milliseconds&lt;/i&gt; @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); &lt;i&gt;//...&lt;/i&gt; } public String fallback() {   return "hello"; } &lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Retry&lt;/td&gt; &lt;td&gt;Retry a request&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Retry(maxRetries=3) public String getSalutation() { makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Timeout&lt;/td&gt; &lt;td&gt;Wait period before assuming failure&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timeout(value = 500 ) &lt;i&gt;// milliseconds&lt;/i&gt; @Fallback(fallbackMethod = "fallback") public String getSalutation() {   makeRemoteCall(); //... }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Service Health&lt;/h3&gt; &lt;p&gt;Platforms like Kubernetes utilize probes to check the health of a container. Spring developers utilize a custom HealthIndicator and Spring Boot Actuator to expose the health of a service to the underlying platform. With Quarkus, Spring developers can utilize MicroProfile Health to expose the health of a service. A default liveness check is provided, and developers can provide custom liveness and readiness checks as well. Table 6 covers a sample of the MicroProfile Health APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt;&lt;span style="font-weight: 400"&gt; uses MicroProfile Health to expose the readiness of an application. The Quarkus &lt;a href="https://quarkus.io/guides/health-guide"&gt;Health Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 6: Sample of MicroProfile Health APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;MicroProfile Health&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Liveness&lt;/td&gt; &lt;td&gt;Platform will reboot unhealthy containerized applications.&lt;/p&gt; &lt;p&gt;Endpoint:&lt;br /&gt; host:8080/health/live&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Liveness public class MyHC implements HealthCheck {   public HealthCheckResponse call() {    ...   return HealthCheckResponse     .named("myHCProbe")     .status(ready ? true:false)     .withData("mydata", data)     .build();  }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Readiness&lt;/td&gt; &lt;td&gt;Platform will not direct traffic to containerized applications that are not ready.&lt;/p&gt; &lt;p&gt;Endpoint:&lt;br /&gt; host:8080/health/ready&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Readiness public class MyHC implements HealthCheck {   public HealthCheckResponse call() {    ...   return HealthCheckResponse     .named("myHCProbe")     .status(live ? true:false)     .withData("mydata", data)     .build();  }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;Metrics&lt;/h3&gt; &lt;p&gt;Applications expose metrics for operational reasons (like performance SLAs) and non-operational reasons (like business SLAs). Spring developers typically utilize Spring Boot Actuator and Micrometer to expose metrics. Quarkus utilizes MicroProfile Metrics to expose base (JVM &amp;#38; Operating System), Vendor (Quarkus), and application metrics. MicroProfile Metrics requires JSON and OpenMetrics (Prometheus) output formats be supported by implementations. Table 7 covers a sample of the MicroProfile Metrics APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses MicroProfile Metrics to expose the application metrics. The Quarkus &lt;a href="https://quarkus.io/guides/metrics-guide"&gt;Metrics Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 7: Sample of MicroProfile Metrics APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="text-align: center"&gt;&lt;b&gt;MicroProfile Metrics&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt; &lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Counted&lt;/td&gt; &lt;td&gt;Denotes a counter which counts the invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Counted(name = "fallbackCounter",   displayName = "Fallback Counter",   description = "Fallback Counter") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@ConcurrentGauge&lt;/td&gt; &lt;td&gt;Denotes a gauge which counts the parallel invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@ConcurrentGuage(   name = "fallbackConcurrentGauge",   displayName="Fallback Concurrent",   description="Fallback Concurrent") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Gauge&lt;/td&gt; &lt;td&gt;Denotes a gauge, which samples the&lt;br /&gt; value of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metered(name = "FallbackGauge",   displayName="Fallback Gauge", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Metered&lt;/td&gt; &lt;td&gt;Denotes a meter which tracks the frequency of invocations of the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metered(name = "MeteredFallback",   displayName="Metered Fallback", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Metric&lt;/td&gt; &lt;td&gt;An annotation that contains the metadata&lt;br /&gt; information when requesting a metric to&lt;br /&gt; be injected or produced.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Metric @Metered(name = "MeteredFallback",   displayName="Metered Fallback", description="Fallback frequency") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@Timed&lt;/td&gt; &lt;td&gt;Denotes a timer which tracks duration of&lt;br /&gt; the annotated object.&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Timed(name = "TimedFallback",   displayName="Timed Fallback", description="Fallback delay") public String salutationFallback() {   return fallbackSalutation; }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="3"&gt;&lt;b&gt;Metrics Endpoints&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Application metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/application&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Base metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/base&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Vendor metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics/vendor&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;All metrics&lt;/td&gt; &lt;td colspan="2"&gt;http://localhost:8080/metrics&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h3&gt;MicroProfile Rest Client&lt;/h3&gt; &lt;p&gt;Microservices often expose RESTful endpoints, requiring a client API to consume a RESTful endpoint. Spring developers typically use a RestTemplate to consume RESTful endpoints. Quarkus supports the MicroProfile Rest Client API to do the same. Table 8 covers a sample of MicroProfile Rest Client APIs.&lt;/p&gt; &lt;p&gt;The&lt;a href="https://github.com/jclingan/quarkus-spring-microprofile"&gt; example project&lt;/a&gt; uses MicroProfile Rest Client to consume RESTful endpoints. The Quarkus &lt;a href="https://quarkus.io/guides/rest-client-guide"&gt;Rest Client Guide&lt;/a&gt; goes into greater detail along with additional examples.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Table 8: Sample of MicroProfile Rest Client APIs&lt;/b&gt;&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;MicroProfile&lt;/b&gt;&lt;b&gt;&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Rest Client&lt;br /&gt; &lt;/b&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td style="text-align: center"&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RegisterRestClient&lt;/td&gt; &lt;td&gt;Register a typed Java interface as a REST client&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@RegisterRestClient @Path("/") public interface MyRestClient {     @GET     @Produces(MediaType.TEXT_PLAIN)     public String getSalutation(); }&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;@RestClient&lt;/td&gt; &lt;td&gt;Decorate  instance injection of a typed REST client interface&lt;/td&gt; &lt;td&gt; &lt;pre&gt;@Autowired // or @Inject @RestClient MyRestClient restClient;&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Invocation&lt;/td&gt; &lt;td&gt;Invoke REST endpoint&lt;/td&gt; &lt;td&gt; &lt;pre&gt;System.out.println( restClient.getSalutation());&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;mp-rest/url&lt;/td&gt; &lt;td&gt;Specify rest endpoint&lt;/td&gt; &lt;td&gt; &lt;pre&gt;application.properties: org.example.MyRestClient/mp-rest/url= http://localhost:8081/myendpoint&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This article provided an overview, primarily for Spring developers, on using Spring APIs together and MicroProfile APIs with Quarkus. Spring developers can now use some of the APIs they know and love, combined with MicroProfile APIs, to live code Java microservices and then compile them to a native binary savings 100&amp;#8217;s of MB of RAM while starting in milliseconds.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;a href="https://quarkus.io/guides/"&gt;Quarkus guides&lt;/a&gt; provide more details around Spring and MicroProfile API support, and much more.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#38;linkname=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F02%2Fautowire-microprofile-into-spring-with-quarkus%2F&amp;#038;title=Autowire%20MicroProfile%20into%20Spring%20with%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/" data-a2a-title="Autowire MicroProfile into Spring with Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/"&gt;Autowire MicroProfile into Spring with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qgNKVbI5XzU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Eclipse MicroProfile and Spring Boot are often thought of as separate and distinct APIs when developing Java microservices. Developers default to their mental muscle memory by leveraging the APIs that they use on a daily basis. Learning new frameworks and runtimes can be a significant time investment. This article aims to ease the introduction to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/"&gt;Autowire MicroProfile into Spring with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">628717</post-id><dc:creator>john clingan</dc:creator><dc:date>2019-10-02T07:00:03Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/</feedburner:origLink></entry><entry><title>DevOpsDays Raleigh 2019 - Creating Real DevOpS Heroes (workshop)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/G6SQS8Qqkps/devopsdays-raleigh-2019-creating-real-devops-heroes-workshop.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devopsdays_raleigh_2019_creating_real_devops_heroes_workshop</id><updated>2019-10-01T14:00:04Z</updated><published>2019-10-01T14:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="background-color: white; clear: both; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-align: center;"&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" style="clear: left; color: #4d469c; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="DevOps Days" border="0" data-original-height="700" data-original-width="738" height="189" src="https://1.bp.blogspot.com/-FIa5Yx-TuM8/XH1o2SwpWNI/AAAAAAAAtf4/CIaDAo2_NYk9BsZytIj8QhXdJnZywv6qACLcBGAs/s200/Screenshot%2B2019-03-04%2Bat%2B19.04.53.png" style="background: transparent none repeat scroll 0% 0%; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" title="" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;Today was the launch of&amp;nbsp; this new workshop, focused on creating real DevOps heros by sharing a brand new (for most) tool for their toolboxes at &lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" style="background-color: white; color: #4d469c; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-decoration-line: none;" target="_blank"&gt;DevOps Days Raleigh&lt;/a&gt;. &lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;Whether you're a developer or and operations minded person, it's always nice to have a powerful selection of tooling to choose from when tackling the various problems in your daily work.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;When this &lt;a href="https://www.schabell.org/2019/07/devops-days-raleigh-2019-devops-heros-accepted.html" target="_blank"&gt;session was accepted&lt;/a&gt; I was pretty excited as it gave me the chance to share something entirely new with process automation and DevOps at it's core. While thinking about how to leverage automation integration across organizations for more than just CI/CD and infrastructure automation, this workshop was born.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;Here's the abstract and workshop slides for you to enjoy as it's designed for anyone to enjoy from any web browser at their own pace. &lt;/span&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;The abstract for this session was focused on given you the chance to experience process automation tooling from the ground up, even if you have no prior experience with this type of tooling.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/a&gt;&lt;/h3&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;div&gt;&lt;i&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It's also about organizational change and integration of many subtle processes that help you to deliver applications seamlessly from development to production through your operations.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Let's unlock the power of process integration with a hands-on workshop using your own devices (laptops). We'll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you'll build a domain model, creating an automated process, integrating user approval tasks and more using modern open source process automation tooling.&amp;nbsp;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Bring your laptop as this is a hands on experience that takes you from nothing to a fully working DevOps supporting automation integration project. No experience in automation integration is required. Let's add a new tool to your development toolbox and get you jump started on automation integration that's supporting your organizations DevOps activities.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;(90 minute workshop format with bring your own device, so you can &lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;do this at home too&lt;/a&gt;!)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Hope you enjoyed this workshop if you attended the event, otherwise, enjoy it now at your own pace!&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sXT95_4Id5k:3jZegFT7mdA:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sXT95_4Id5k:3jZegFT7mdA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sXT95_4Id5k:3jZegFT7mdA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=sXT95_4Id5k:3jZegFT7mdA:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=sXT95_4Id5k:3jZegFT7mdA:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/sXT95_4Id5k" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/G6SQS8Qqkps" height="1" width="1" alt=""/&gt;</content><summary>Today was the launch of  this new workshop, focused on creating real DevOps heros by sharing a brand new (for most) tool for their toolboxes at DevOps Days Raleigh. Whether you're a developer or and operations minded person, it's always nice to have a powerful selection of tooling to choose from when tackling the various problems in your daily work. When this session was accepted I was pretty exci...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-10-01T14:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/sXT95_4Id5k/devopsdays-raleigh-2019-creating-real-devops-heroes-workshop.html</feedburner:origLink></entry><entry><title>Introduction to microservices observability with Eclipse MicroProfile</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rJ8ne0qSdhc/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><author><name>rhsilva</name></author><id>searchisko:content:id:jbossorg_blog-introduction_to_microservices_observability_with_eclipse_microprofile</id><updated>2019-10-01T07:00:20Z</updated><published>2019-10-01T07:00:20Z</published><content type="html">&lt;p&gt;Microservices provide a modern approach to development, which is compliant with the cloud environment and gives us the ability to create cloud-native applications. With &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, we promote resilience, fault tolerance, and scale; however, a microservice approach also presents different challenges than monolithic applications because of its distributed nature.&lt;/p&gt; &lt;p&gt;One of these challenges involves monitoring and logging, which naturally brings us to the concept of observability. In this article, we&amp;#8217;ll look at how &lt;a href="https://microprofile.io/"&gt;Eclipse MicroProfile&lt;/a&gt; can help you implement observability in microservices.&lt;span id="more-631507"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is observability?&lt;/h2&gt; &lt;p&gt;The concept of observability comes from the control theory, that is, a math theory.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Formally, a system is said to be &lt;b&gt;observable&lt;/b&gt; if, for any possible sequence of &lt;a class="mw-redirect" title="State space representation" href="https://en.wikipedia.org/wiki/State_space_representation#Linear_systems"&gt;state and control vectors&lt;/a&gt; (the latter being variables whose values one can choose), the current state (the values of the underlying dynamically evolving variables) can be determined in finite time using only the outputs.&lt;/em&gt; — &lt;a href="https://en.wikipedia.org/wiki/Observability"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Some developers define observability in a microservice architecture as the set of metrics, logging, and tracing tools, but I think observability is a more general concept. Metrics, logging, and tracing are simply ways to provide observability.&lt;/p&gt; &lt;p&gt;To me, observability is the capacity of a system to expose precise information about its states in a quick and easy way. Unlike monitoring, observability is about the system. When we talk about monitoring, the focus is on the tools used to monitor the system, which can be easy or hard to monitor. When we talk about observability, the focus is on the system itself and the need to provide this information in an easier and faster way.&lt;/p&gt; &lt;h2&gt;Observability with MicroProfile&lt;/h2&gt; &lt;p&gt;With the aim of supporting easy observability, MicroProfile has specifications that let the developer implement observability in microservices. MicroProfile has three main specifications for this:  Microprofile OpenTracing, MicroProfile Metrics, and MicroProfile HealthCheck—all of which we&amp;#8217;ll look at here.&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-full wp-image-270" src="https://rhuanrochanet.files.wordpress.com/2019/02/screenshot-from-2019-02-27-16-44-31.png" alt="Screenshot from 2019-02-27 16-44-31" width="724" height="395" /&gt;&lt;/p&gt; &lt;h3&gt;MicroProfile OpenTracing&lt;/h3&gt; &lt;p&gt;The &lt;a href="https://microprofile.io/project/eclipse/microprofile-opentracing"&gt;MicroProfile OpenTracing&lt;/a&gt; specification permits us to use distributed tracing using the OpenTracing API to trace  the flow of a request across a service. This specification is compatible with Zipkin and Jaeger, and it permits us to use those tools to show information about the distributed tracing. Below is an example of how to use MicroProfile OpenTracing.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@Path("subjects") @Traced public SubjectEndpoint { &lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;MicroProfile Metrics&lt;/h3&gt; &lt;p&gt;&lt;a href="https://microprofile.io/project/eclipse/microprofile-metrics"&gt;MicroProfile Metrics&lt;/a&gt; is a specification that permits us to expose metrics information about our applications. With this, we can expose precise metrics to be consumed more quickly and easily. Below is an example of how to use MicroProfile Metrics.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@Counted public CounterBean() { }&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;MicroProfile HealthCheck&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The &lt;a href="https://microprofile.io/project/eclipse/microprofile-health"&gt;MicroProfile HealthCheck&lt;/a&gt; spec permits us to expose if the application is up or down in our environment. It works as a Boolean response (yes or no) to the question, &amp;#8220;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Is my application still running ok?&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&amp;#8220;. Below is an example of how to use MicroProfile HealthCheck.&lt;/span&gt;&lt;/p&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;&lt;span style="font-weight: 400;"&gt;@Health&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;public&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;class&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;ApplicationHealthCheck&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;implements&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;HealthCheck&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;{&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;@Override&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;public&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;HealthCheckResponse&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; call&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;()&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;{&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;return&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;HealthCheckResponse&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;named&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;(&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;"application-check"&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;).&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;up&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;()&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;withData&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;(&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;"CPUAvailable"&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;,&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Runtime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;getRuntime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;().&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;availableProcessors&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;())&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;withData&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;(&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;"MemoryFree"&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;,&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Runtime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;getRuntime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;().&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;freeMemory&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;())&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;withData&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;(&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;"TotalMemory"&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;,&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Runtime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;getRuntime&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;().&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;totalMemory&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;())&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;build&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;();&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;}&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;} &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Eclipse MicroProfile provides several solutions to microservice challenges, including various specifications to promote observability in our microservices. With these specs, we can use MicroProfile with Jaeger, Zipkin, Prometheus, and other tools to promote better observability and monitoring. I will provide more details of these specs and how to use them in upcoming articles.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#38;linkname=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F10%2F01%2Fintroduction-to-microservices-observability-with-eclipse-microprofile%2F&amp;#038;title=Introduction%20to%20microservices%20observability%20with%20Eclipse%20MicroProfile" data-a2a-url="https://developers.redhat.com/blog/2019/10/01/introduction-to-microservices-observability-with-eclipse-microprofile/" data-a2a-title="Introduction to microservices observability with Eclipse MicroProfile"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/10/01/introduction-to-microservices-observability-with-eclipse-microprofile/"&gt;Introduction to microservices observability with Eclipse MicroProfile&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rJ8ne0qSdhc" height="1" width="1" alt=""/&gt;</content><summary>Microservices provide a modern approach to development, which is compliant with the cloud environment and gives us the ability to create cloud-native applications. With microservices, we promote resilience, fault tolerance, and scale; however, a microservice approach also presents different challenges than monolithic applications because of its distributed nature. One of these challenges involves ...</summary><dc:creator>rhsilva</dc:creator><dc:date>2019-10-01T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/10/01/introduction-to-microservices-observability-with-eclipse-microprofile/</feedburner:origLink></entry><entry><title>Sending a telegram with Apache Camel K and Visual Studio Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_f1CXIZ_QfA/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Camel K" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Brian Fitzpatrick</name></author><id>searchisko:content:id:jbossorg_blog-sending_a_telegram_with_apache_camel_k_and_visual_studio_code</id><updated>2019-09-30T07:00:22Z</updated><published>2019-09-30T07:00:22Z</published><content type="html">&lt;p&gt;When I was introduced to &lt;a href="https://camel.apache.org/camel-k/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Apache Camel K&lt;/a&gt; a few months ago, I was amazed at how quickly developers could write and deploy an &lt;a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache Camel&lt;/a&gt;-based integration on &lt;a href="https://developers.redhat.com/developer-tools/kubernetes"&gt;Kubernetes&lt;/a&gt;. We immediately started work on creating Microsoft Visual Studio (VS) Code-based tools to make things even easier.&lt;/p&gt; &lt;p&gt;What is Camel K? It’s a lightweight integration framework built from Apache Camel and designed for a serverless/microsystem world that runs natively on Kubernetes. It lets developers write integrations in their favorite Camel DSL and quickly deploy them on Kubernetes or &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. You can even write your integrations in lightweight languages like Groovy or JavaScript.&lt;/p&gt; &lt;p&gt;We already built language support in VS Code for Apache Camel using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-apache-camel"&gt;Language Server Protocol (LSP)&lt;/a&gt;, offering auto-completion for Camel component URIs in both XML and Java. More recently, we began adding the same support for Groovy, JavaScript, YAML, and Kotlin. (See the &lt;a href="https://github.com/camel-tooling/camel-lsp-client-vscode" target="_blank" rel="noopener noreferrer"&gt;Apache Camel LSP client project&lt;/a&gt; for details.)&lt;/p&gt; &lt;p&gt;Now, with our new &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-camelk" target="_blank" rel="noopener noreferrer"&gt;Tooling for Apache Camel K by Red Hat extension&lt;/a&gt;, we add support for Camel K in your IDE. To illustrate the tools in action, let’s start with a simple user story inspired by an article that Nicola Ferraro wrote a few years ago (&lt;a href="https://www.nicolaferraro.me/2016/05/27/creating-a-telegram-bot-in-5-minutes-with-apache-camel/"&gt;Creating a Telegram Bot in 5 minutes with Apache Camel&lt;/a&gt;).&lt;span id="more-630437"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;As a developer, I want to send myself a telegram notice any time somebody mentions the hashtag #camelkrocks so that I can better engage with our social media community.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To get started, let’s assume that you have the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Telegram account and access to the Telegram messaging client or access via https://web.telegram.org/.&lt;/li&gt; &lt;li&gt;Apache Camel K running in an accessible Kubernetes instance, with the Kubernetes and Camel K command line tools installed locally.&lt;/li&gt; &lt;li&gt;Microsoft Visual Studio Code running locally with the Tooling for Apache Camel K by Red Hat extension installed.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before you create the Camel K side of the Telegram bot, you have to create your bot on Telegram. Nicola did a great job detailing those steps &lt;a href="https://www.nicolaferraro.me/2016/05/27/creating-a-telegram-bot-in-5-minutes-with-apache-camel/"&gt;in his article&lt;/a&gt;; see the section on creating the Telegram bot there and give your bot a unique name, like &lt;em&gt;camelk-hashtag-telegram-bot&lt;/em&gt;. Be sure to note the authorization token given by the @BotFather.&lt;/p&gt; &lt;p&gt;Now in VS Code, create a new workspace with an empty directory called &lt;code&gt;hashtagbot&lt;/code&gt;. In the &lt;code&gt;hashtagbot&lt;/code&gt; directory, create a file named &lt;code&gt;hashtagbot.groovy&lt;/code&gt; and copy this text into the file:&lt;/p&gt; &lt;pre&gt;from("telegram:bots/replace-me-with-your-telegram-token")     .choice()         .when()             .simple('${in.body} != null')             .to("direct:response1") from("direct:response1")     .log('Incoming message from Telegram is ${in.body}')     .setBody()         .simple('You said \"${in.body}\"?')         .to("telegram:bots/replace-me-with-your-telegram-token")&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember to replace “replace-me-with-your-telegram-token” with your Telegram authorization token given by the @BotFather.&lt;/p&gt; &lt;p&gt;After you save your file, right-click it and select &lt;em&gt;Start Apache Camel K Integration&lt;/em&gt; from the pop-up menu. A drop-down appears in the command palette with a few choices. Select &lt;em&gt;Dev Mode &amp;#8211; Apache Camel K Integration in Dev Mode&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-630457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/integration-type-dropdown.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/integration-type-dropdown.jpg" alt="" width="686" height="211" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/integration-type-dropdown.jpg 686w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/integration-type-dropdown-300x92.jpg 300w" sizes="(max-width: 686px) 100vw, 686px" /&gt;&lt;/p&gt; &lt;p&gt;As your integration starts to run, watch the Apache Camel K output channel that appears:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-630467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-1024x352.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel.jpg" alt="" width="1102" height="379" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel.jpg 1102w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-300x103.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-768x264.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-1024x352.jpg 1024w" sizes="(max-width: 1102px) 100vw, 1102px" /&gt;&lt;/p&gt; &lt;p&gt;In your Telegram app, find your bot (use the name you specified when you created the bot in @BotFather) and start a new conversation. Everything you type in Telegram should be repeated with “You said “&amp;#60;whatyoutyped&amp;#62;?” For example:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-630477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message-1024x782.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message.jpg" alt="" width="1107" height="845" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message.jpg 1107w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message-300x229.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message-768x586.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-first-message-1024x782.jpg 1024w" sizes="(max-width: 1107px) 100vw, 1107px" /&gt;&lt;/p&gt; &lt;p&gt;Next, update your route to check whether a given string has our hashtag #camelkrocks in it and respond accordingly.&lt;/p&gt; &lt;p&gt;Change the second route in your &lt;code&gt;hashtagbot.groovy&lt;/code&gt; file as follows:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;from("direct:response1")     .log('Incoming message from Telegram is ${in.body}')         &lt;b&gt;.choice() &lt;/b&gt;&lt;b&gt;    &lt;/b&gt;&lt;b&gt;    &lt;/b&gt;&lt;b&gt;.when(simple('${bodyAs(java.lang.String)} contains "#camelkrocks"')) &lt;/b&gt;&lt;b&gt;        .setBody(simple('Did somebody say #camelrocks? Of course it does!')) &lt;/b&gt;        .to("telegram:bots/replace-me-with-your-telegram-token")                 .end()&lt;/pre&gt; &lt;p&gt;Once you save your route, it updates the deployed integration and you can try it out. For example:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-630487 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message-1024x817.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message.jpg" alt="" width="1121" height="894" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message.jpg 1121w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message-300x239.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message-768x612.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/09/bot-integration-output-channel-second-message-1024x817.jpg 1024w" sizes="(max-width: 1121px) 100vw, 1121px" /&gt;&lt;/p&gt; &lt;p&gt;Though this is a very simple example, you could use the approach as a basis to do things like routing messages to a database or to an email address for follow-up later.&lt;/p&gt; &lt;p&gt;We also have different deployment options that can save you from having to include your telegram token in the body of your route.&lt;/p&gt; &lt;p&gt;One way is to use the Apache Camel K “property” option.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;In the &lt;code&gt;hashtagbot.groovy&lt;/code&gt; file, edit the route by replacing your token with &lt;code&gt;{{telegram-token}}&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;When you start the integration, deploy the route by selecting the &lt;em&gt;Property &amp;#8211; Apache Camel K Integration with Property&lt;/em&gt; option in the drop-down menu.&lt;/li&gt; &lt;li&gt;Specify a property with the name &lt;code&gt;telegram-token&lt;/code&gt; and the value as your telegram authentication token. The runtime will replace &lt;code&gt;{{telegram-token}} &lt;/code&gt;with your token value.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Another way is to use the Apache Camel K ConfigMap or Secret method.  With this method, your token value is secured in the Kubernetes system.&lt;/p&gt; &lt;p&gt;For example, to use the Secret method:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create a new &lt;code&gt;application.properties&lt;/code&gt; file and save it to your &lt;code&gt;hashtagbot&lt;/code&gt; folder.&lt;/li&gt; &lt;li&gt;In the &lt;code&gt;application.properties&lt;/code&gt; file, add the following line (replace the value with your actual token):&lt;br /&gt; &lt;code&gt;&lt;b&gt;telegram-token=replace-me-with-your-telegram-token&lt;/b&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Right-click on the &lt;code&gt;application.properties&lt;/code&gt; file and then select &lt;em&gt;Create Kubernetes Secret from File&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Name the new secret &lt;code&gt;telegram-secret&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In the &lt;code&gt;hashtagbot.groovy&lt;/code&gt; file, edit the route by replacing your token with &lt;code&gt;{{telegram-token}}&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;When you start the integration, deploy the route by selecting the &lt;em&gt;Secret &amp;#8211; Apache Camel K Integration with Kubernetes Secret&lt;/em&gt; option in the drop-down menu.&lt;/li&gt; &lt;li&gt;In the drop-down list that appears, specify the &lt;code&gt;telegram-secret&lt;/code&gt; that you created. The Camel K runtime will replace &lt;code&gt;{{telegram-token}} &lt;/code&gt;with your token value.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;To learn more, check out the latest on &lt;a href="https://camel.apache.org/camel-k/latest/"&gt;Apache Camel K&lt;/a&gt; and see the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-camelk"&gt;Tooling for Apache Camel K by Red Hat extension for Microsoft VS Code&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#38;linkname=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F30%2Fsending-a-telegram-with-apache-camel-k-and-visual-studio-code%2F&amp;#038;title=Sending%20a%20telegram%20with%20Apache%20Camel%20K%20and%20Visual%20Studio%20Code" data-a2a-url="https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code/" data-a2a-title="Sending a telegram with Apache Camel K and Visual Studio Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code/"&gt;Sending a telegram with Apache Camel K and Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_f1CXIZ_QfA" height="1" width="1" alt=""/&gt;</content><summary>When I was introduced to Apache Camel K a few months ago, I was amazed at how quickly developers could write and deploy an Apache Camel-based integration on Kubernetes. We immediately started work on creating Microsoft Visual Studio (VS) Code-based tools to make things even easier. What is Camel K? It’s a lightweight integration framework built from Apache Camel and designed for a serverless/micro...</summary><dc:creator>Brian Fitzpatrick</dc:creator><dc:date>2019-09-30T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code/</feedburner:origLink></entry></feed>
